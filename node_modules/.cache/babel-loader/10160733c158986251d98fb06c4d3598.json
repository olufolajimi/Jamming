{"ast":null,"code":"import { SearchBar } from \"../Components/SearchBar/SearchBar\";\nconst redirectURI = \"http://localhost:3000/\";\nconst clentID = \"756819499fd4455b8ebb596835f33a82\";\nlet accessToken;\nlet expirationTime;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else {\n      if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n        accessToken = window.location.href.match(/access_token=([^&]*)/);\n        expirationTime = window.location.href.match(/expires_in=([^&]*)/);\n        window.setTimeout(() => accessToken = '', expirationTime * 1000);\n        window.history.pushState('Access Token', null, '/');\n        window.location = `https://accounts.spotify.com/authorize?\n                        client_id=${clentID}\n                        &response_type=token\n                        &scope=playlist-modify-public\n                        &redirect_uri=${redirectURI}`;\n      }\n    }\n  },\n\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(JSONResponse => {\n      return JSONResponse.map(track => {\n        return track.id, track.name, track.artists[0].name, track.album.name, track.uri;\n      });\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    }\n\n    let accessTokenVar = accessToken;\n    let headersVar = {\n      Authorization: `Bearer ${accessTokenVar}`\n    };\n    let userID = \"\";\n    userID = fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headersVar\n    }).then(response => {\n      return response.json().id;\n    });\n    xhttp.open(\"POST\", `https://api.spotify.com/v1/users/${userID}/playlists`, {\n      headers: headersVar,\n      body: {\n        name: playlistName\n      },\n      method: \"POST\"\n    });\n    xhttp.send(`name=${playlistName}`);\n  }\n\n};\nexport { Spotify };","map":{"version":3,"sources":["/Users/folajimi1/Google Drive/Codecademy/Projects/Jamming/jamming/src/util/Spotify.js"],"names":["SearchBar","redirectURI","clentID","accessToken","expirationTime","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","json","JSONResponse","map","track","id","name","artists","album","uri","savePlaylist","playlistName","trackURIs","accessTokenVar","headersVar","userID","xhttp","open","body","method","send"],"mappings":"AAAA,SAASA,SAAT,QAA0B,mCAA1B;AAEA,MAAMC,WAAW,GAAG,wBAApB;AACA,MAAMC,OAAO,GAAG,kCAAhB;AAEA,IAAIC,WAAJ;AACA,IAAIC,cAAJ;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAIH,WAAJ,EAAiB;AACb,aAAOA,WAAP;AACH,KAFD,MAEO;AACH,UAAII,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,KACAH,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CADJ,EACsD;AAC9CP,QAAAA,WAAW,GAAGI,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAd;AACAN,QAAAA,cAAc,GAAGG,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAjB;AACAH,QAAAA,MAAM,CAACI,UAAP,CAAkB,MAAMR,WAAW,GAAG,EAAtC,EAA0CC,cAAc,GAAG,IAA3D;AACAG,QAAAA,MAAM,CAACK,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACAN,QAAAA,MAAM,CAACC,QAAP,GAAmB;oCACHN,OAAQ;;;wCAGJD,WAAY,EAJhC;AAKP;AACJ;AACJ,GAlBW;;AAoBZa,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,WAAOC,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EACR;AAAEE,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAASf,WAAY;AAAtC;AAAX,KADQ,CAAL,CAELgB,IAFK,CAEEC,QAAD,IAAc;AAAE,aAAOA,QAAQ,CAACC,IAAT,EAAP;AAAwB,KAFzC,EAGLF,IAHK,CAGCG,YAAY,IAAI;AAAE,aAAOA,YAAY,CAACC,GAAb,CAAkBC,KAAK,IAAI;AAAE,eAAOA,KAAK,CAACC,EAAN,EAAUD,KAAK,CAACE,IAAhB,EAAsBF,KAAK,CAACG,OAAN,CAAc,CAAd,EAAiBD,IAAvC,EAA6CF,KAAK,CAACI,KAAN,CAAYF,IAAzD,EAA+DF,KAAK,CAACK,GAA5E;AAAiF,OAA9G,CAAP;AAAyH,KAH5I,CAAP;AAIH,GAzBW;;AA2BZC,EAAAA,YAAY,CAACC,YAAD,EAAeC,SAAf,EAA0B;AAClC,QAAI,CAACD,YAAD,IAAiB,CAACC,SAAtB,EAAiC;AAC7B;AACH;;AACD,QAAIC,cAAc,GAAG9B,WAArB;AACA,QAAI+B,UAAU,GAAG;AAAEhB,MAAAA,aAAa,EAAG,UAASe,cAAe;AAA1C,KAAjB;AACA,QAAIE,MAAM,GAAG,EAAb;AAEAA,IAAAA,MAAM,GAAGnB,KAAK,CAAC,+BAAD,EAAkC;AAACC,MAAAA,OAAO,EAAEiB;AAAV,KAAlC,CAAL,CACHf,IADG,CACGC,QAAQ,IAAI;AAAC,aAAOA,QAAQ,CAACC,IAAT,GAAgBI,EAAvB;AAA0B,KAD1C,CAAT;AAGAW,IAAAA,KAAK,CAACC,IAAN,CAAW,MAAX,EAAoB,oCAAmCF,MAAO,YAA9D,EACC;AAAElB,MAAAA,OAAO,EAAEiB,UAAX;AAAuBI,MAAAA,IAAI,EAAE;AAACZ,QAAAA,IAAI,EAAEK;AAAP,OAA7B;AAAmDQ,MAAAA,MAAM,EAAE;AAA3D,KADD;AAEAH,IAAAA,KAAK,CAACI,IAAN,CAAY,QAAOT,YAAa,EAAhC;AAEH;;AA1CW,CAAhB;AA8CA,SAAS1B,OAAT","sourcesContent":["import { SearchBar } from \"../Components/SearchBar/SearchBar\";\n\nconst redirectURI = \"http://localhost:3000/\";\nconst clentID = \"756819499fd4455b8ebb596835f33a82\";\n\nlet accessToken;\nlet expirationTime;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } else {\n            if (window.location.href.match(/access_token=([^&]*)/) &&\n                window.location.href.match(/expires_in=([^&]*)/)) {\n                    accessToken = window.location.href.match(/access_token=([^&]*)/); \n                    expirationTime = window.location.href.match(/expires_in=([^&]*)/);\n                    window.setTimeout(() => accessToken = '', expirationTime * 1000);\n                    window.history.pushState('Access Token', null, '/');\n                    window.location = `https://accounts.spotify.com/authorize?\n                        client_id=${clentID}\n                        &response_type=token\n                        &scope=playlist-modify-public\n                        &redirect_uri=${redirectURI}`;\n            }\n        }\n    },\n\n    search(term) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n            { headers: {Authorization: `Bearer ${accessToken}`} }\n        ).then( (response) => { return response.json() } \n        ).then( JSONResponse => { return JSONResponse.map( track => { return track.id, track.name, track.artists[0].name, track.album.name, track.uri } ) } )\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs) {\n            return;\n        }\n        let accessTokenVar = accessToken;\n        let headersVar = { Authorization: `Bearer ${accessTokenVar}` };\n        let userID = \"\";\n\n        userID = fetch(\"https://api.spotify.com/v1/me\", {headers: headersVar}\n            ).then( response => {return response.json().id} )\n\n        xhttp.open(\"POST\", `https://api.spotify.com/v1/users/${userID}/playlists`,\n         { headers: headersVar, body: {name: playlistName}, method: \"POST\" })\n        xhttp.send(`name=${playlistName}`)\n\n    }\n}\n\n\nexport { Spotify };"]},"metadata":{},"sourceType":"module"}