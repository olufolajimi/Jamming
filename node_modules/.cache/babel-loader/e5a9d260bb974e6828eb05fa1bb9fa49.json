{"ast":null,"code":"const redirectURI = \"http://localhost:3000/\";\nconst clentID = \"756819499fd4455b8ebb596835f33a82\";\nlet accessToken;\nlet expirationTime;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } else if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      accessToken = window.location.href.match(/access_token=([^&]*)/);\n      expirationTime = window.location.href.match(/expires_in=([^&]*)/);\n      window.setTimeout(() => accessToken = '', expirationTime * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?\n                client_id=${clentID}\n                &response_type=token\n                &scope=playlist-modify-public\n                &redirect_uri=${redirectURI}`;\n    }\n  },\n\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(JSONResponse => {\n      return JSONResponse.map(track => {\n        return track.id, track.name, track.artists[0].name, track.album.name, track.uri;\n      });\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    }\n\n    let accessTokenVar = accessToken;\n    let headersVar = {\n      Authorization: `Bearer ${accessTokenVar}`,\n      \"Content-Type\": \"application/json\"\n    };\n    let userID = \"\";\n    userID = fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headersVar\n    }).then(response => {\n      return response.json().id;\n    });\n    let playlistID = fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      headers: headersVar,\n      body: {\n        name: playlistName\n      },\n      method: \"POST\"\n    }).then(response => {\n      return response.json().id;\n    });\n    playlistID = fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n      headers: headersVar,\n      body: {\n        uris: trackURIs\n      }\n    }).then(response => {\n      return response.json().id;\n    });\n  }\n\n};\nexport { Spotify };","map":{"version":3,"sources":["/Users/folajimi1/Google Drive/Codecademy/Projects/Jamming/jamming/src/util/Spotify.js"],"names":["redirectURI","clentID","accessToken","expirationTime","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","json","JSONResponse","map","track","id","name","artists","album","uri","savePlaylist","playlistName","trackURIs","accessTokenVar","headersVar","userID","playlistID","body","method","uris"],"mappings":"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","sourcesContent":["\nconst redirectURI = \"http://localhost:3000/\";\nconst clentID = \"756819499fd4455b8ebb596835f33a82\";\n\nlet accessToken;\nlet expirationTime;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } else if (window.location.href.match(/access_token=([^&]*)/) &&\n        window.location.href.match(/expires_in=([^&]*)/)) {\n            accessToken = window.location.href.match(/access_token=([^&]*)/); \n            expirationTime = window.location.href.match(/expires_in=([^&]*)/);\n            window.setTimeout(() => accessToken = '', expirationTime * 1000);\n            window.history.pushState('Access Token', null, '/');\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?\n                client_id=${clentID}\n                &response_type=token\n                &scope=playlist-modify-public\n                &redirect_uri=${redirectURI}`;\n        } \n    },\n\n    search(term) {\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n            { headers: {Authorization: `Bearer ${accessToken}`} }\n        ).then( (response) => { return response.json() } \n        ).then( JSONResponse => { return JSONResponse.map( track => { return track.id, track.name, track.artists[0].name, track.album.name, track.uri } ) } )\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs) {\n            return;\n        }\n        let accessTokenVar = accessToken;\n        let headersVar = { Authorization: `Bearer ${accessTokenVar}`, \"Content-Type\": \"application/json\" };\n        let userID = \"\";\n\n        userID = fetch(\"https://api.spotify.com/v1/me\", {headers: headersVar}\n            ).then( response => {return response.json().id} )\n\n        let playlistID = fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n            { headers: headersVar, body: {name: playlistName}, method: \"POST\" }\n         ).then(response => { return response.json().id })\n        playlistID = fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, \n            { headers: headersVar, body: { uris: trackURIs } }\n        ).then(response => { return response.json().id })\n    }\n}\n\n\nexport { Spotify };"]},"metadata":{},"sourceType":"module"}