{"ast":null,"code":"const Spotify = {\n  redirectURI: \"http://localhost:3000/\",\n  clientID: \"756819499fd4455b8ebb596835f33a82\",\n  accessToken: '',\n  expirationTime: '',\n\n  getAccessToken() {\n    if (this.accessToken) {\n      return this.accessToken;\n    } else if (window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/)) {\n      this.accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n      this.expirationTime = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(() => this.accessToken = '', this.expirationTime * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = `https://accounts.spotify.com/authorize?client_id=${this.clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${this.redirectURI}`;\n    }\n  },\n\n  search(term) {\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&limit=5`, {\n      headers: {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }).then(async response => {\n      const JSONResponse = await response.json();\n      return JSONResponse.tracks.items.map(track => {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if (!playlistName || !trackURIs) {\n      return;\n    }\n\n    let headersVar = {\n      Authorization: `Bearer ${this.accessToken}`,\n      \"Content-Type\": \"application/json\"\n    };\n    let userID = \"\";\n    userID = fetch(\"https://api.spotify.com/v1/me\", {\n      headers: headersVar\n    }).then(response => {\n      return response.json().id;\n    });\n    let playlistID = fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n      headers: headersVar,\n      body: {\n        name: playlistName\n      },\n      method: \"POST\"\n    }).then(response => {\n      return response.json().id;\n    });\n    playlistID = fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n      headers: headersVar,\n      body: {\n        uris: trackURIs\n      }\n    }).then(response => {\n      return response.json().id;\n    });\n  }\n\n};\nexport { Spotify };","map":{"version":3,"sources":["/Users/folajimi1/Google Drive/Codecademy/Projects/Jamming/jamming/src/util/Spotify.js"],"names":["Spotify","redirectURI","clientID","accessToken","expirationTime","getAccessToken","window","location","href","match","setTimeout","history","pushState","search","term","fetch","headers","Authorization","then","response","JSONResponse","json","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlistName","trackURIs","headersVar","userID","playlistID","body","method","uris"],"mappings":"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","sourcesContent":["\n\nconst Spotify = {\n\n\n    redirectURI: \"http://localhost:3000/\",\n    clientID: \"756819499fd4455b8ebb596835f33a82\",\n    \n    accessToken: '',\n    expirationTime: '',\n\n    getAccessToken() {\n        if (this.accessToken) {\n            return this.accessToken;\n        } else if (window.location.href.match(/access_token=([^&]*)/) &&\n        window.location.href.match(/expires_in=([^&]*)/)) {\n            this.accessToken = window.location.href.match(/access_token=([^&]*)/)[1]; \n            this.expirationTime = window.location.href.match(/expires_in=([^&]*)/)[1];\n            window.setTimeout(() => this.accessToken = '', this.expirationTime * 1000);\n            window.history.pushState('Access Token', null, '/');\n        } else {\n            window.location = `https://accounts.spotify.com/authorize?client_id=${this.clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${this.redirectURI}`;\n        } \n    },\n\n    search(term) {\n        return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track&limit=5`,\n                { headers: {Authorization: `Bearer ${this.accessToken}`} })\n            .then( async (response) => { \n                const JSONResponse = await response.json()\n                return JSONResponse.tracks.items.map( track => { return {id: track.id, name: track.name, artist: track.artists[0].name, album: track.album.name, uri: track.uri}} )\n            })\n    },\n\n    savePlaylist(playlistName, trackURIs) {\n        if (!playlistName || !trackURIs) {\n            return;\n        }\n        let headersVar = { Authorization: `Bearer ${this.accessToken}`, \"Content-Type\": \"application/json\" };\n        let userID = \"\";\n\n        userID = fetch(\"https://api.spotify.com/v1/me\", {headers: headersVar}\n            ).then( response => {return response.json().id} )\n\n        let playlistID = fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\n            { headers: headersVar, body: {name: playlistName}, method: \"POST\" }\n         ).then(response => { return response.json().id })\n        playlistID = fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, \n            { headers: headersVar, body: { uris: trackURIs } }\n        ).then(response => { return response.json().id })\n    }\n}\n\n\nexport { Spotify };"]},"metadata":{},"sourceType":"module"}